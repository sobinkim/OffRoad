//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/04.Input/Controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controller: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controller"",
    ""maps"": [
        {
            ""name"": ""CarMovement"",
            ""id"": ""4036d4a5-8fd3-41a3-b45c-f7ff09a93f31"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""2f533ca5-eaa5-4bff-9f7c-cc8e4cfacd47"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""brake"",
                    ""type"": ""Button"",
                    ""id"": ""ea642911-c7a8-409b-878e-1cfb7d85eca6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""c72f5642-0490-45bc-8f87-a641dfeda30f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9603575d-b8ae-4123-9fbf-a035cf81eeb4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""705fce0a-8e72-4227-9dda-43aa78d23f28"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f8bb99a8-7929-441f-a9a5-a777d5c95238"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3d6c2d15-71d9-4544-a1e4-44808f254e78"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b3d4c513-653d-4571-b241-f8939ba95db7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0f5939e1-c10b-4849-8d6e-5cf655f19ab0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b75526c4-aaf6-43ed-adb2-6ccd46e31495"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CarMovement
        m_CarMovement = asset.FindActionMap("CarMovement", throwIfNotFound: true);
        m_CarMovement_move = m_CarMovement.FindAction("move", throwIfNotFound: true);
        m_CarMovement_brake = m_CarMovement.FindAction("brake", throwIfNotFound: true);
        m_CarMovement_Boost = m_CarMovement.FindAction("Boost", throwIfNotFound: true);
    }

    ~@Controller()
    {
        UnityEngine.Debug.Assert(!m_CarMovement.enabled, "This will cause a leak and performance issues, Controller.CarMovement.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CarMovement
    private readonly InputActionMap m_CarMovement;
    private List<ICarMovementActions> m_CarMovementActionsCallbackInterfaces = new List<ICarMovementActions>();
    private readonly InputAction m_CarMovement_move;
    private readonly InputAction m_CarMovement_brake;
    private readonly InputAction m_CarMovement_Boost;
    public struct CarMovementActions
    {
        private @Controller m_Wrapper;
        public CarMovementActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_CarMovement_move;
        public InputAction @brake => m_Wrapper.m_CarMovement_brake;
        public InputAction @Boost => m_Wrapper.m_CarMovement_Boost;
        public InputActionMap Get() { return m_Wrapper.m_CarMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CarMovementActions set) { return set.Get(); }
        public void AddCallbacks(ICarMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_CarMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CarMovementActionsCallbackInterfaces.Add(instance);
            @move.started += instance.OnMove;
            @move.performed += instance.OnMove;
            @move.canceled += instance.OnMove;
            @brake.started += instance.OnBrake;
            @brake.performed += instance.OnBrake;
            @brake.canceled += instance.OnBrake;
            @Boost.started += instance.OnBoost;
            @Boost.performed += instance.OnBoost;
            @Boost.canceled += instance.OnBoost;
        }

        private void UnregisterCallbacks(ICarMovementActions instance)
        {
            @move.started -= instance.OnMove;
            @move.performed -= instance.OnMove;
            @move.canceled -= instance.OnMove;
            @brake.started -= instance.OnBrake;
            @brake.performed -= instance.OnBrake;
            @brake.canceled -= instance.OnBrake;
            @Boost.started -= instance.OnBoost;
            @Boost.performed -= instance.OnBoost;
            @Boost.canceled -= instance.OnBoost;
        }

        public void RemoveCallbacks(ICarMovementActions instance)
        {
            if (m_Wrapper.m_CarMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICarMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_CarMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CarMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CarMovementActions @CarMovement => new CarMovementActions(this);
    public interface ICarMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
    }
}
